function fixed_matrix = trajectory_fixer(movement_matrix,current_position, bu_position, gridSize)

fixed_matrix = [];

while(size(movement_matrix,1)>0)
    disp("aaaaaa")
    if(current_position + movement_matrix(1,:) == bu_position) %If next position is MU
        if(movement_matrix(1,:) == [1,0]) %Check if the MU is to the right
            
            if(movement_matrix(2,:) == [0,1]) %Check if the next position is up
                
                fixed_matrix = [fixed_matrix; [0,1]; [1,0]];
                current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                movement_matrix(1,:) = [];
                movement_matrix(1,:) = [];                   

            
            elseif(movement_matrix(2,:) == [0,-1]) %Check if the next position is down
               
                fixed_matrix = [fixed_matrix; [0,-1]; [1,0]];
                current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                movement_matrix(1,:) = [];
                movement_matrix(1,:) = [];
                           
            
            
            elseif(movement_matrix(2,:) == [1, 0]) %Check if the next position is right
                   
                if(current_position(2) ~= gridSize) %Check if we do not exceed the boundary
                        
                        fixed_matrix = [fixed_matrix; [0,1]; [1,0]; [1,0];[0,-1]];
                        current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                        movement_matrix(1,:) = [];
                        movement_matrix(1,:) = [];
                    else
                        fixed_matrix = [fixed_matrix; [0,-1]; [1,0]; [1,0];[0,1]];
                        current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                        movement_matrix(1,:) = [];
                        movement_matrix(1,:) = [];                    
                    
                    end
           

            end
            
        elseif(movement_matrix(1,:) == [-1,0]) %Check if the MU is to the left
            
            if(movement_matrix(2,:) == [0,1]) %Check if the next position is up
                
                fixed_matrix = [fixed_matrix; [0,1]; [-1,0]];
                current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                movement_matrix(1,:) = [];
                movement_matrix(1,:) = [];                   

            
            elseif(movement_matrix(2,:) == [0,-1]) %Check if the next position is down
               
                fixed_matrix = [fixed_matrix; [0,-1]; [-1,0]];
                current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                movement_matrix(1,:) = [];
                movement_matrix(1,:) = [];
                           
            
            
            elseif(movement_matrix(2,:) == [-1, 0]) %Check if the next position is left
                   
                if(current_position(2) ~= gridSize) %Check if we do not exceed the boundary
                        
                        fixed_matrix = [fixed_matrix; [0,1]; [-1,0]; [-1,0];[0,-1]];
                        current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                        movement_matrix(1,:) = [];
                        movement_matrix(1,:) = [];
                    else
                        fixed_matrix = [fixed_matrix; [0,-1]; [-1,0]; [-1,0];[0,1]];
                        current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                        movement_matrix(1,:) = [];
                        movement_matrix(1,:) = [];                    
                    
                    end
           

            end

            elseif(movement_matrix(1,:) == [0,1]) %Check if the MU is above
            
                if(movement_matrix(2,:) == [-1,0]) %Check if the next position is left
                    
                    fixed_matrix = [fixed_matrix; [-1,0]; [0,1]];
                    current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                    movement_matrix(1,:) = [];
                    movement_matrix(1,:) = [];                   
    
                
                elseif(movement_matrix(2,:) == [1,0]) %Check if the next position is right
                   
                    fixed_matrix = [fixed_matrix; [1,0]; [0,1]];
                    current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                    movement_matrix(1,:) = [];
                    movement_matrix(1,:) = [];
                               
                
                
                elseif(movement_matrix(2,:) == [0, 1]) %Check if the next position is up
                       
                         if(current_position(1) ~= gridSize) %Check if we do not exceed the boundary
                            
                            fixed_matrix = [fixed_matrix; [1,0]; [0,1]; [0,1];[-1,0]];
                            current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                            movement_matrix(1,:) = [];
                            movement_matrix(1,:) = [];
                        else
                            fixed_matrix = [fixed_matrix; [-1,0]; [0,1]; [0,1];[1,0]];
                            current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                            movement_matrix(1,:) = [];
                            movement_matrix(1,:) = [];                    
                        
                        end
               
    
                end

        else %MU is below
            if(movement_matrix(2,:) == [-1,0]) %Check if the next position is left
                    
                    fixed_matrix = [fixed_matrix; [-1,0]; [0,-1]];
                    current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                    movement_matrix(1,:) = [];
                    movement_matrix(1,:) = [];                   
    
                
                elseif(movement_matrix(2,:) == [1,0]) %Check if the next position is right
                   
                    fixed_matrix = [fixed_matrix; [1,0]; [0,-1]];
                    current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                    movement_matrix(1,:) = [];
                    movement_matrix(1,:) = [];
                               
                
                
                elseif(movement_matrix(2,:) == [0, -1]) %Check if the next position is down
                       
                         if(current_position(1) ~= gridSize) %Check if we do not exceed the boundary
                            
                            fixed_matrix = [fixed_matrix; [1,0]; [0,-1]; [0,-1];[-1,0]];
                            current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                            movement_matrix(1,:) = [];
                            movement_matrix(1,:) = [];
                        else
                            fixed_matrix = [fixed_matrix; [-1,0]; [0,-1]; [0,-1];[1,0]];
                            current_position = current_position + movement_matrix(1,: ) + movement_matrix(2,: );
                            movement_matrix(1,:) = [];
                            movement_matrix(1,:) = [];                    
                        
                        end
               
    
                end


        end

    else
         fixed_matrix = [fixed_matrix; movement_matrix(1,:)];
         current_position = current_position + movement_matrix(1,: );    
         movement_matrix(1,:) = [];

    end

       


end

end